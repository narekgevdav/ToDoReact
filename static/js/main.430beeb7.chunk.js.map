{"version":3,"sources":["serviceWorker.js","components/header.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToDoItem","state","value","setState","toDoItemList","concat","toConsumableArray","handelKeyPress","e","key","doneToDoItemList","handleChange","bind","assertThisInitialized","handelDelete","handelDone","event","target","index","splice","unshift","_this2","react_default","a","createElement","style","textAlign","type","onChange","onKeyPress","onClick","listStyleType","map","item","length","React","Component","ReactDOM","render","header","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.430beeb7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      toDoItemList: [],\r\n      doneToDoItemList: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handelDelete = this.handelDelete.bind(this);\r\n    this.handelKeyPress = this.handelKeyPress.bind(this);\r\n    this.handelDone = this.handelDone.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n  }\r\n  addToDoItem = () => {\r\n    if (this.state.value != \"\") {\r\n      this.setState({\r\n        value: \"\",\r\n        toDoItemList: [...this.state.toDoItemList, this.state.value]\r\n      });\r\n    }\r\n  };\r\n  handelDelete(index) {\r\n    this.state.toDoItemList.splice(index, 1);\r\n    this.setState({\r\n      toDoItemList: [...this.state.toDoItemList]\r\n    });\r\n  }\r\n  handelKeyPress = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.addToDoItem();\r\n    }\r\n  };\r\n  handelDone(index) {\r\n    this.state.doneToDoItemList.unshift(this.state.toDoItemList[index]);\r\n    this.state.toDoItemList.splice(index, 1);\r\n    this.setState({\r\n      toDoItemList: [...this.state.toDoItemList],\r\n      doneToDoItemList: [...this.state.doneToDoItemList]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <span>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            onChange={this.handleChange}\r\n            onKeyPress={this.handelKeyPress}\r\n          />\r\n        </span>\r\n        <button onClick={this.addToDoItem}>add</button>\r\n        <ul style={{ listStyleType: \"none\" }}>\r\n          {this.state.toDoItemList.map((item, index) => (\r\n            <li key={index}>\r\n              <span>{item}</span>\r\n              <button\r\n                onClick={e => {\r\n                  this.handelDone(index);\r\n                }}\r\n              >\r\n                V\r\n              </button>\r\n              <button\r\n                onClick={e => {\r\n                  this.handelDelete(index);\r\n                }}\r\n              >\r\n                X\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        {this.state.doneToDoItemList.length != 0 && (\r\n          <div>\r\n            <h1>Done ToDos</h1>\r\n            <ul style={{ listStyleType: \"none\" }}>\r\n              {this.state.doneToDoItemList.map((item, index) => (\r\n                <li key={index}>{item}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport Header from \"./components/header\";\n\nReactDOM.render(<Header />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}